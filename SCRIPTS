DECLARE @lo int = 1, @hi int;
DECLARE @xmlData XML; -- Variable para almacenar el XML

-- Leer el archivo XML y cargarlo en la variable @xmlData (esto depende de cómo se carga en tu caso)
-- Esto se asume que ya lo tienes o lo haces fuera de este bloque

-- Estructura de la tabla temporal
DECLARE @TipoDeMovimientoXML TABLE (
    Sec int identity(1,1),
    Id int,
    Nombre nvarchar(100),
    TipoAccion nvarchar(50)
);

-- Insertar los datos del XML en la tabla temporal
INSERT INTO @TipoDeMovimientoXML(Id, Nombre, TipoAccion)
SELECT
    T.C.value('@Id', 'int') AS Id,
    T.C.value('@Nombre', 'nvarchar(100)') AS Nombre,
    T.C.value('@TipoAccion', 'nvarchar(50)') AS TipoAccion
FROM @xmlData.nodes('/TiposMovimientos/TipoMovimiento') AS T(C);

-- Obtener el valor máximo de Sec
SELECT @hi = MAX(Sec) FROM @TipoDeMovimientoXML;

-- Bucle para procesar los datos de la tabla temporal
WHILE (@lo <= @hi)
BEGIN
    -- Declaración de variables para almacenar los campos
    DECLARE @Id int, @Nombre nvarchar(100), @TipoAccion nvarchar(50);

    -- Obtener los valores de la fila actual
    SELECT
        @Id = TM.Id,
        @Nombre = TM.Nombre,
        @TipoAccion = TM.TipoAccion
    FROM @TipoDeMovimientoXML AS TM
    WHERE TM.Sec = @lo;

    -- Ejecutar el procedimiento almacenado con los valores obtenidos
    EXEC insertaTipoDM @Id, @Nombre, @TipoAccion, @outresult;

    -- Incrementar el contador del bucle
    SET @lo = @lo + 1;
END;




CREATE PROCEDURE insertaTipoDM
    @Nombre NVARCHAR(100),
    @TipoAccion NVARCHAR(50),
    @outresult NVARCHAR(200) OUTPUT
AS
BEGIN
    -- Iniciar transacción para asegurar atomicidad
   SET NOCOUNT ON;

    BEGIN TRY

        -- Insertar los valores en la tabla de destino
        INSERT INTO TipoDeMovimientos (Nombre, TipoAccion)
        VALUES (@Nombre, @TipoAccion);

        -- Asignar mensaje de éxito al parámetro de salida
        SET @outresult = 'Inserción exitosa para el Id: ' + CAST(@Id AS NVARCHAR(10));

        -- Confirmar la transacción
    END TRY
    BEGIN CATCH

        SET @outresult = 'Error: ' + ERROR_MESSAGE();
    PRINT 'Ocurrió un error al insertar el puesto';
        PRINT ERROR_MESSAGE();  -- Mostrar el mensaje de error
    END CATCH;
END;
go

CREATE PROCEDURE insertarTipoE
@Nombre NVARCHAR(50),
    @outresult NVARCHAR(200) OUTPUT

    AS
    BEGIN
        SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO dbo.TipoEvento(Nombre)
        VALUES(@Nombre)
        SET @outresult = 'Inserción exitosa para el Id: ';

    end try
    begin catch

        SET @outresult = 'Error: ' + ERROR_MESSAGE();
    PRINT 'Ocurrió un error al insertar el puesto';
        PRINT ERROR_MESSAGE();  -- Mostrar el mensaje de error
    end catch
    end
    go

CREATE PROCEDURE insertarUsuario
@Username NVARCHAR(50),
    @Password NVARCHAR(50),
    @outresult NVARCHAR(200) OUTPUT

    AS
    BEGIN
        SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO dbo.TipoEvento(Nombre)
        VALUES(@Username,@Password)
        SET @outresult = 'Inserción exitosa para el Id: ';

    end try
    begin catch

        SET @outresult = 'Error: ' + ERROR_MESSAGE();
    PRINT 'Ocurrió un error al insertar el puesto';
        PRINT ERROR_MESSAGE();  -- Mostrar el mensaje de error
    end catch
    end
    go


CREATE PROCEDURE insertarError
@Codigo INT,
    @Descripcion NVARCHAR(50),
    @outresult NVARCHAR(200) OUTPUT

    AS
    BEGIN
        SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO dbo.Error(Codigo, Descripcion)
        VALUES(@Codigo,@Descripcion)
        SET @outresult = 'Inserción exitosa para el Id: ';

    end try
    begin catch

        SET @outresult = 'Error: ' + ERROR_MESSAGE();
    PRINT 'Ocurrió un error al insertar el puesto';
        PRINT ERROR_MESSAGE();  -- Mostrar el mensaje de error
    end catch
    end
    go

CREATE PROCEDURE insertarEmpleado
@IDpuesto INT,
    @DocID INT,
    @Nombre NVARCHAR(100),
    @FechaC DATE,
    @Saldo DECIMAL(5,2),
    @EsAtivo BIT,
    @outresult NVARCHAR(200) OUTPUT

    AS
    BEGIN
        SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO dbo.Empleado(idPuesto, ValorDocumentoIdentidad, Nombre, FechaContratacion, SaldoVacaciones, EsActivo)
        VALUES(@IDpuesto,@DocID,@Nombre,@FechaC,@Saldo,@EsAtivo)
        SET @outresult = 'Inserción exitosa para el Id: ';

    end try
    begin catch

        SET @outresult = 'Error: ' + ERROR_MESSAGE();
    PRINT 'Ocurrió un error al insertar el puesto';
        PRINT ERROR_MESSAGE();  -- Mostrar el mensaje de error
    end catch
    end
    go


CREATE PROCEDURE insertarMovimiento
@IDempleado INT,
    @IDtipodeM INT,
    @FechaC DATE,
    @Monto DECIMAL(10,2),
    @NuevoSaldo DECIMAL(10,2),
    @IdPostBY INT,
    @Post NVARCHAR(50),
    @FechaR DATETIME,
    @outresult NVARCHAR(200) OUTPUT

    AS
    BEGIN
        SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO dbo.Movimientos(IdEmpleado, IdTipoMovimiento, Fecha, Monto, NuevoSaldo, IdPostByUser, PostInIP, PostTime)
        VALUES(@IDempleado,@IDtipodeM,@FechaC,@Monto,@NuevoSaldo,@IdPostBY,@Post,@FechaR)
        SET @outresult = 'Inserción exitosa para el Id: ';

    end try
    begin catch

        SET @outresult = 'Error: ' + ERROR_MESSAGE();
    PRINT 'Ocurrió un error al insertar el puesto';
        PRINT ERROR_MESSAGE();  -- Mostrar el mensaje de error
    end catch
    end
    go


    CREATE PROCEDURE insertarBitacora
@IDTipoE INT,
    @Descripcion NVARCHAR(50),
    @IdPostBY INT,
    @Post NVARCHAR(50),
    @FechaR DATETIME,
    @outresult NVARCHAR(200) OUTPUT

    AS
    BEGIN
        SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO dbo.BitacoraEvento(IdTipoEvento, Descripcion, IdPostByUser, PostInIP, PostTime)
        VALUES(@IDTipoE,@Descripcion,@IdPostBY,@Post,@FechaR)
        SET @outresult = 'Inserción exitosa para el Id: ';

    end try
    begin catch

        SET @outresult = 'Error: ' + ERROR_MESSAGE();
    PRINT 'Ocurrió un error al insertar el puesto';
        PRINT ERROR_MESSAGE();  -- Mostrar el mensaje de error
    end catch
    end
    go


    CREATE PROCEDURE insertarDBError
@Username NVARCHAR(100),
    @Number int,
        @State int,
        @Sev int,
    @Line int,
    @Proced NVARCHAR(100),
    @Message NVARCHAR(100),
    @FechaR DATETIME,
    @outresult NVARCHAR(200) OUTPUT

    AS
    BEGIN
        SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO dbo.DBError(UserName, Number, State, Severity, Line, Proced, Message, DateTime)
        VALUES(@Username,@Number,@State,@Sev,@Line,@Proced,@Message,@FechaR)
        SET @outresult = 'Inserción exitosa para el Id: ';

    end try
    begin catch

        SET @outresult = 'Error: ' + ERROR_MESSAGE();
    PRINT 'Ocurrió un error al insertar el puesto';
        PRINT ERROR_MESSAGE();  -- Mostrar el mensaje de error
    end catch
    end
    go


CREATE PROCEDURE ContarIntentosFallidosLogin
    @Username NVARCHAR(100),
    @TiempoLimite DATETIME,
    @TipoEventoLoginFallido INT,
    @NumeroIntentos INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    -- Contar intentos fallidos en los últimos 30 minutos
    SELECT @NumeroIntentos = COUNT(*)
    FROM BitacoraEvento
    WHERE IdPostByUser = (SELECT Id FROM Users WHERE Username = @Username)
    AND PostTime > @TiempoLimite
    AND idTipoEvento = @TipoEventoLoginFallido;
END


CREATE PROCEDURE dbo.ValidarYContarIntentos
    @Username NVARCHAR(64),            -- Nombre de usuario
    @Password NVARCHAR(256),           -- Contraseña
    @TiempoLimite DATETIME,            -- Límite de tiempo para contar intentos fallidos
    @TipoEventoLoginFallido INT,       -- Tipo de evento para login fallido
    @NumeroIntentos INT OUTPUT,         -- Parámetro de salida para el número de intentos fallidos
    @OutResult INT OUTPUT               -- Parámetro de salida para indicar el resultado de la validación
AS
BEGIN
    SET NOCOUNT ON;

    -- Inicializar los parámetros de salida
    SET @NumeroIntentos = 0;
    SET @OutResult = 0;

    BEGIN TRY
        -- Contar intentos fallidos en los últimos 30 minutos
        SELECT @NumeroIntentos = COUNT(*)
        FROM BitacoraEvento
        WHERE IdPostByUser = (SELECT Id FROM Users WHERE Username = @Username)
        AND PostTime > @TiempoLimite
        AND idTipoEvento = @TipoEventoLoginFallido;

        -- Comprobar si existe un usuario con el nombre de usuario proporcionado
        DECLARE @UserCount INT;
        SELECT @UserCount = COUNT(*)
        FROM dbo.Usuario AS u
        WHERE u.Username = @Username;

        -- Si el usuario no existe, devolver error 50001
        IF @UserCount = 0
        BEGIN
            SET @OutResult = 50001; -- Username no existe
            RETURN;
        END

        -- Comprobar si la contraseña es correcta
        DECLARE @PasswordCount INT;
        SELECT @PasswordCount = COUNT(*)
        FROM dbo.Usuario AS u
        WHERE u.Username = @Username AND u.Password = @Password;

        -- Si la contraseña es incorrecta, devolver error 50002
        IF @PasswordCount = 0
        BEGIN
            -- Registrar intento de login fallido
            INSERT INTO BitacoraEvento (idTipoEvento, Descripcion, IdPostByUser, PostInIP, PostTime)
            VALUES (@TipoEventoLoginFallido, 'Login fallido para el usuario ' + @Username, (SELECT Id FROM Users WHERE Username = @Username), NULL, GETDATE());

            SET @OutResult = 50002; -- Password no existe
            RETURN;
        END

        -- Comprobar si el login está deshabilitado
        DECLARE @LoginEnabled BIT;
        SELECT @LoginEnabled = u.LoginEnabled  -- Suponiendo que hay una columna LoginEnabled en la tabla
        FROM dbo.Usuario AS u
        WHERE u.Username = @Username;

        IF @LoginEnabled = 0
        BEGIN
            SET @OutResult = 50003; -- Login deshabilitado
            RETURN;
        END

        -- Si el login es exitoso
        SET @OutResult = 1; -- Credenciales válidas
    END TRY
    BEGIN CATCH
        PRINT 'Error occurred in dbo.ValidarYContarIntentos';
        -- Guardar información del error en la tabla DBErrors
        INSERT INTO dbo.DBError
        (
            UserName,
            Number,
            State,
            Severity,
            Line,
            Proced,
            Message,
            DateTime
        )
        VALUES
        (
            @Username,                            -- Nombre de usuario
            ERROR_NUMBER(),                       -- Número de error
            ERROR_STATE(),                        -- Estado del error
            ERROR_SEVERITY(),                     -- Severidad del error
            ERROR_LINE(),                         -- Línea donde ocurrió el error
            'dbo.ValidarYContarIntentos',       -- Nombre del procedimiento
            ERROR_MESSAGE(),                      -- Mensaje del error
            GETDATE()                             -- Fecha y hora actual
        );

        -- Manejo del error, establecer OutResult a 50008 como error de base de datos
        SET @OutResult = 50008;
    END CATCH;
END;
GO


DECLARE @lo INT = 1, @hi INT;

               -- Declarar la variable de tabla para almacenar los datos del XML
               DECLARE @movimientosXML TABLE (
                   Sec INT IDENTITY(1, 1),
                   Nombre NVARCHAR(100),
                   SalarioxHora DECIMAL(10, 2)
               );

               -- Cargar el XML desde el archivo
               DECLARE @XMLDoc XML;

               SET @XMLDoc = (SELECT * FROM OPENROWSET(BULK '/Users/danielmendez/Desktop/Tarea2/Datos.xml', SINGLE_BLOB) AS DatosXML);

               -- Insertar los datos del XML en la tabla de variable
               INSERT INTO @movimientosXML (Nombre, SalarioxHora)
               SELECT
                   P.value('@Nombre', 'NVARCHAR(100)') AS Nombre,
                   P.value('@SalarioxHora', 'DECIMAL(10,2)') AS SalarioxHora
               FROM @XMLDoc.nodes('/Datos/Puestos/Puesto') AS P(P);

               -- Obtener el número máximo de registros insertados
               SELECT @hi = MAX(Sec) FROM @movimientosXML;

               WHILE (@lo <= @hi)
               BEGIN
                   DECLARE @campoNombre NVARCHAR(100);
                   DECLARE @campoSalario DECIMAL(10, 2);

                   -- Cargar en variables los campos de la tabla de variable
                   SELECT
                       @campoNombre = M.Nombre,
                       @campoSalario = M.SalarioxHora
                   FROM @movimientosXML AS M
                   WHERE M.Sec = @lo;

                   -- Ejecutar la inserción en la tabla Puestos
                   INSERT INTO Puesto (Nombre, SalarioxHora)
                   VALUES (@campoNombre, @campoSalario);

                   SET @lo = @lo + 1;
               END


 DECLARE @movimientosXML TABLE (
    IDempleado NVARCHAR(100),
    Tipomovimiento NVARCHAR(100),
    Fecha DATE,
    Monto DECIMAL(10, 2),
    IDPost NVARCHAR(100),
    IP NVARCHAR(100),
    FechaPost DATETIME
);

-- Insertar datos desde el XML en la tabla temporal
INSERT INTO @movimientosXML (IDempleado, Tipomovimiento, Fecha, Monto, IDPost, IP, FechaPost)
SELECT
    M.value('@ValorDocId', 'NVARCHAR(100)') AS IDempleado,
    M.value('@IdTipoMovimiento', 'NVARCHAR(100)') AS Tipomovimiento,
    M.value('@Fecha', 'DATE') AS Fecha,
    M.value('@Monto', 'DECIMAL(10,2)') AS Monto,
    M.value('@PostByUser', 'NVARCHAR(100)') AS IDPost,
    M.value('@PostInIP', 'NVARCHAR(100)') AS IP,
    M.value('@PostTime', 'DATETIME') AS FechaPost
FROM @XMLDoc.nodes('/Datos/Movimientos/movimiento') AS M(M);  -- Asegúrate de que el path sea correcto

-- Insertar los datos en la tabla Movimientos usando un JOIN
INSERT INTO Movimientos (IdEmpleado, IdTipoMovimiento, Fecha, Monto, NuevoSaldo, IdPostByUser, PostInIP, PostTime)
SELECT
    E.Id,
    TM.Id,  -- Obtener el Id del tipo de movimiento
    m.Fecha,
    m.Monto,
    CASE
        WHEN TM.TipoAccion = 'Credito' THEN
            ISNULL((SELECT SaldoVacaciones FROM dbo.Empleado WHERE ValorDocumentoIdentidad = m.IDempleado), 0) + m.Monto
        WHEN TM.TipoAccion = 'Debito' THEN
            ISNULL((SELECT SaldoVacaciones FROM dbo.Empleado WHERE ValorDocumentoIdentidad = m.IDempleado), 0) - m.Monto
        ELSE
            ISNULL((SELECT SaldoVacaciones FROM dbo.Empleado WHERE ValorDocumentoIdentidad = m.IDempleado), 0)
    END AS NuevoSaldo,
    U.id,
    m.IP,
    m.FechaPost
FROM
    @movimientosXML m
JOIN
    dbo.Empleado E ON E.ValorDocumentoIdentidad = m.IDempleado  -- Relación correcta con IDempleado
JOIN
    dbo.TipoDeMovimiento TM ON TM.Nombre = m.Tipomovimiento
JOIN
    dbo.Usuario U ON U.Username = m.IDPost;



@app.route('/success', methods=['GET', 'POST'])
def success():

    conn = get_db_connection()
    cursor = conn.cursor()
    user = session.get('username')
    client_ip = request.remote_addr
    search_query = request.form.get('search_query', '')
    data = []

    if search_query:
        if search_query.isdigit():
            cursor.execute('EXEC buscarDocumento @NumeroDocumento = ?', (search_query,))
            cursor.execute(
                "EXEC dbo.insertarBitacora @IDTipoE = 12, @Descripcion = ?, @IdPostBY = ?, @Post = ?",
                (f"Búsqueda por documento: {search_query}", user, client_ip))
            conn.commit()
            data = cursor.fetchall()
        else:
            cursor.execute('EXEC buscarEmpleados @Caracter = ?', (search_query,))
            cursor.execute(
                "EXEC dbo.insertarBitacora @IDTipoE = 11, @Descripcion = ?, @IdPostBY = ?, @Post = ?",
                (f"Búsqueda por nombre: {search_query}", user, client_ip))
            conn.commit()
            data = cursor.fetchall()
    else:
        cursor.execute('EXEC ListarOrdenado')
        data = cursor.fetchall()



    cursor.execute('EXEC dbo.ListarPuestos')
    puestos = cursor.fetchall()

    cursor.close()
    conn.close()

    return render_template('table.html', data=data, search_query=search_query, puestos=puestos)
